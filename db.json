{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"59deb690ba4ac96837e94abf09fbfc7b8f94d8f8","modified":1556366372609},{"_id":"themes/archer/.eslintrc.json","hash":"5c79a54f29b1d32045e612fcb7379797d79ac380","modified":1556366372617},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1556366372618},{"_id":"themes/archer/.prettierignore","hash":"075b20da2bb3dfa7932394363d63d98cbb0b7042","modified":1556366372928},{"_id":"themes/archer/.prettierrc.js","hash":"c77c76428fb4eefd727444d97fa2733a0c10286a","modified":1556366372929},{"_id":"themes/archer/LICENSE","hash":"35f4fb806270f8243459c870a2141e795dfab166","modified":1556366372930},{"_id":"themes/archer/README.md","hash":"e7ddbbdc5d5ec445a3bc99c684df83ae7783624c","modified":1556366372931},{"_id":"themes/archer/_config.yml","hash":"36a6a0db601fb003fd1d30e5ec3474eeb53b2196","modified":1556366372932},{"_id":"themes/archer/gulpfile.js","hash":"ba7c6a88298900460ddd1649300b5672956902f9","modified":1556366372952},{"_id":"themes/archer/package.json","hash":"c07c94772d0e92e77788b0fe5beb3d44eb3c245f","modified":1556366372993},{"_id":"themes/archer/webpack.prod.js","hash":"b6d35f7e9a9718b3e5e3e17c52fcc5e7c38330b0","modified":1556366373066},{"_id":"themes/archer/webpack.config.js","hash":"348da2932316c2789a3c0a3cf5efff0dd7cc4ffe","modified":1556366373065},{"_id":"themes/archer/dev/archer.sh","hash":"9474c501c1c55f47f02cccdd9e2039498ebc5e43","modified":1556366372935},{"_id":"themes/archer/languages/en.yml","hash":"de8fe8ad1967854586fee2214094c4992dd05278","modified":1556366372958},{"_id":"themes/archer/languages/default.yml","hash":"c6e36691ded2a5e5939c67bf3c47104664ea56c6","modified":1556366372957},{"_id":"source/_posts/2019-04-26-博客写作内容.md","hash":"e7941bfc874ec0f3674dc5a389baeff6cdbfedd1","modified":1556369284590},{"_id":"source/_posts/2019-04-24-个人站点建站过程.md","hash":"3e3108444b4e4ea51ec909c58a4d8f118aca232b","modified":1556368021152},{"_id":"themes/archer/docs/README-en.md","hash":"e4fff6fc13f3296c2b168ab220f847192bf1273b","modified":1556366372937},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"c10293eb8ccad5d02412a1369ec1c7e77516b929","modified":1556366372939},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"522434202e5e810b3c7f9591eb3a4451a4e485f0","modified":1556366372940},{"_id":"themes/archer/layout/404.ejs","hash":"a054b4ea1147846bed4252dd56182cb8e32d95eb","modified":1556366372960},{"_id":"themes/archer/layout/about.ejs","hash":"990df15653a99453617e72dfc195fa0a75b9a5d1","modified":1556366372984},{"_id":"source/_posts/2019-04-23-Git指令整理.md","hash":"1d30776534cc24859f85878f06824b4e4451487f","modified":1556459796261},{"_id":"themes/archer/layout/layout.ejs","hash":"fffd1188977f74d19e2f9d267d085dddc9c6778e","modified":1556366372987},{"_id":"themes/archer/layout/post.ejs","hash":"f14b49c920a3afe8d9aa4cb1d843faf43d07c72e","modified":1556366372988},{"_id":"themes/archer/layout/index.ejs","hash":"c9ae77cd8f7b862d23137a7b4eb5eb01b558ed33","modified":1556366372985},{"_id":"themes/archer/layout/site-meta.ejs","hash":"a9d85607fc7da51bb9becff7fe2f07a8b4fbc915","modified":1556366372988},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1556366372994},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1556366372994},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1556366372995},{"_id":"themes/archer/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1556366372995},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1556366372996},{"_id":"themes/archer/source/css/mobile.css","hash":"770d2ffb986a814c5e5662d28d2ec38864d8b1a0","modified":1556366372997},{"_id":"themes/archer/source/css/style.css","hash":"49f5d23b1e24e73016efdd8a6b70964a45a601db","modified":1556366372998},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"6f18a92bbe8bed93113449ed6ff8d148c1e7565a","modified":1556366373026},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1556366373028},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1556366373000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1556366373030},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1556366373001},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"21765ec5abc9a65513e6bff57cb021d3b3852d35","modified":1556366372962},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"a90bd2b089b335b141a6a0d8dee9a9cde60fdc5b","modified":1556366372962},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1556366373029},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"179a712ae139d8c5123338d9bd39d2b09c5ed2ce","modified":1556366372964},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"af76b1a18a63934e83b078bf5f9f886e972a0ceb","modified":1556366372967},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"b343f5a4c8bba1c71f3229390ed83a8679c2f375","modified":1556366372965},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"065f8d6c4aae6782e6819815911f7feb6402a4ec","modified":1556366372969},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"e1b4893af2b18f502bad1b552c3f3381ecc3021f","modified":1556366372973},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"5dadba1c15454e25740982b59ef382686f3c6e51","modified":1556366372971},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"92ac580acc20bde7b3345bfe132671b9043bfbd6","modified":1556366372972},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"fc03729825ac7ffd4045f910bbd936bc5841c65e","modified":1556366372979},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"ce7449948855556971a7353d4bfc7e8cd1b49634","modified":1556366372620},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"1ee1770c446ffe4d489db8d216981f473da4addc","modified":1556366372926},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"7d1c5dbbc89b03b9e764e71aedb3f9567bed49bf","modified":1556366372619},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1556366373006},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1556366373024},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1556366372999},{"_id":"themes/archer/src/js/fancybox.js","hash":"701720a4c56fb09d78ef3494fd3a88b4e2cde238","modified":1556366373033},{"_id":"themes/archer/src/js/initSidebar.js","hash":"e27d52b4ccb9502836570a0673f6b656f9ce3661","modified":1556366373034},{"_id":"themes/archer/src/js/browser.js","hash":"35ea55f62c0f251817c46da0153f70aec323be3d","modified":1556366373032},{"_id":"themes/archer/src/js/main.js","hash":"673e19867b5ecf65b0c9c6579d40be587d0e8211","modified":1556366373037},{"_id":"themes/archer/src/js/mobile.js","hash":"cfc37862242d5b7bd17028269436d3bc42e142e8","modified":1556366373045},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1556366373003},{"_id":"themes/archer/src/js/init.js","hash":"0cf1eb883b87590a771b687431cc5180064d13cd","modified":1556366373033},{"_id":"themes/archer/src/js/search.js","hash":"ef6533c876831377542a57f447550689144a6b71","modified":1556366373046},{"_id":"themes/archer/src/js/share.js","hash":"83a8ad056039cc673b939f47d69ad56337abc382","modified":1556366373046},{"_id":"themes/archer/src/js/sidebar.js","hash":"f2a5ec38766b3f48e3b043b84029f9da878d1c1a","modified":1556366373047},{"_id":"themes/archer/src/js/tag.js","hash":"a868118bb0daf8902b63c48792797def36b9469a","modified":1556366373047},{"_id":"themes/archer/src/js/util.js","hash":"7bec5b1ff8ee91f58d084c47e0ed3908b27adef7","modified":1556366373048},{"_id":"themes/archer/src/scss/_common.scss","hash":"05162d1562d4b141d9bad44c37b0b736371d8b08","modified":1556366373049},{"_id":"themes/archer/src/js/toc.js","hash":"5c4db488dc2d80315064c6832eecfb39017a8104","modified":1556366373048},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"c6347bf137e80bb0c5b6368488ebd634c299016a","modified":1556366373050},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"fb6a1349bab25b65cf89b47e136d958d10947533","modified":1556366373050},{"_id":"themes/archer/src/js/scroll.js","hash":"83f0885f2673234c911d84a56fcaaa020cdcc3e6","modified":1556366373045},{"_id":"themes/archer/src/scss/_variables.scss","hash":"2264c9b671643b3c64e002f968a75355e4091b61","modified":1556366373064},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1556366373004},{"_id":"themes/archer/src/scss/style.scss","hash":"03bca94e57bc44723f8b73bb653f3e002b4b08a8","modified":1556366373065},{"_id":"themes/archer/src/scss/mobile.scss","hash":"0a00e55e8b8d9551eed5966f53d8a6580b816dc5","modified":1556366373064},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556366372974},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"4281841e5bbb5e1a83c3ebf6506dab057e1fe6b9","modified":1556366372980},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"9cd4798cdcd712cc01c9e797adbb4810649310d4","modified":1556366372979},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"4feb7c3d17a3c8994eb095d43d75fbd0f1ed5b4f","modified":1556366372982},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"c5ce643a06a2103aa4ac0d8279c024f90886d37f","modified":1556366372981},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"e710acbc85e1cc5ae0e7ab5b5899837b9f222b97","modified":1556366372982},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"e96750b1aa7113322696857882b1e1fde11c1fc4","modified":1556366372983},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"244a4c71b862e6385a6de1e83a4975418a8c6fe7","modified":1556366372974},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"f1f785de72e1f7056da8fdb12c85523d20a0b6b0","modified":1556366372977},{"_id":"themes/archer/package-lock.json","hash":"f3eae5d3878f7761231613b74be88173d3047c0c","modified":1556366372992},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cfdb15116abe89f4b54f7bb18a0b23a597c47a60","modified":1556366372975},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1556366373010},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1556366373019},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"a6acb5d7778ade98ba5b6932e38a585460513f49","modified":1556366372976},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"483c07212879b116b772f428547c9962be96d2ce","modified":1556366372978},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"c043a98e33252b9a628bfd31c4a3b2883dce2b99","modified":1556366372975},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"55c33bd49880ccaaa2f5d4dff44470886c3f3633","modified":1556366373052},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"08594f05f6ed238a7b79d48ebc1ff1e5c9deec46","modified":1556366373054},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"82a04b6ebb684a87f486cac8f08619ecb52605fd","modified":1556366373055},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"4d4713ec4b766a60577546af9f98eb721c4a63cd","modified":1556366373059},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1556366372948},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"30a3b9165c97bac6f6c795e598408639f5d9670a","modified":1556366373060},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"46d315718d86e9701573df2e39299895d8ca193c","modified":1556366373056},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"1e4510959f51b5d4d3c5781468c77d25546ce905","modified":1556366373058},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"a1163d481627864e9dda441c4c356169cd33a3a1","modified":1556366373056},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"b3cf7523d8e91fce92cd6a118e308632047cc7b3","modified":1556366373057},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"b6db1d4a29c34e1b834c54ca076b8084ceac4885","modified":1556366373058},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"c623385d72ce12fa403f5384ded79c3897d0fc9f","modified":1556366373059},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"28b97b11f17d57a258747bb0facae0ad1911f9d5","modified":1556366373060},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"0691ca23bf6eabef65ff054c7710ec7432e4022c","modified":1556366373061},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"b41904da65b1128510d28a57142298bfd844f7f5","modified":1556366373063},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1556366373015},{"_id":"public/content.json","hash":"a53c8b74a300ba283830fd0f54620cd75d0fcde6","modified":1556547258189},{"_id":"public/archives/index.html","hash":"c1b807cfa90bf4ba9a679fd2fb7f322744415fef","modified":1556547258677},{"_id":"public/2019/04/26/2019-04-26-博客写作内容/index.html","hash":"6111257306375ac8de4d71e27934764db32e0651","modified":1556547258628},{"_id":"public/2019/04/23/2019-04-23-Git指令整理/index.html","hash":"f59d30863c8e4aac5acf5ce883beb8d492fc95ee","modified":1556547258676},{"_id":"public/archives/2019/index.html","hash":"c1b807cfa90bf4ba9a679fd2fb7f322744415fef","modified":1556547258677},{"_id":"public/index.html","hash":"3f29de01024e90a2a6d6f9a386fbc3a791fa4562","modified":1556547258677},{"_id":"public/archives/2019/04/index.html","hash":"c1b807cfa90bf4ba9a679fd2fb7f322744415fef","modified":1556547258677},{"_id":"public/2019/04/24/2019-04-24-个人站点建站过程/index.html","hash":"408cc2d5256954399ffd9cb95498555199d9c4d5","modified":1556547258676},{"_id":"public/tags/Hexo/index.html","hash":"d716b936c58bde239059510393630f63c0755cda","modified":1556547258677},{"_id":"public/tags/Git/index.html","hash":"0159f87c77e4c9266d7cabb8b42406a38548fa12","modified":1556547258678},{"_id":"public/tags/写作/index.html","hash":"ca0b2c7e764318833748f1934afefad785511cf6","modified":1556547258678},{"_id":"public/tags/建站/index.html","hash":"d716b936c58bde239059510393630f63c0755cda","modified":1556547258678},{"_id":"public/tags/Tags/index.html","hash":"ca0b2c7e764318833748f1934afefad785511cf6","modified":1556547258679},{"_id":"public/tags/分类/index.html","hash":"ca0b2c7e764318833748f1934afefad785511cf6","modified":1556547258678},{"_id":"public/CNAME","hash":"59deb690ba4ac96837e94abf09fbfc7b8f94d8f8","modified":1556459714829},{"_id":"public/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1556459714829},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1556459714829},{"_id":"public/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1556459714831},{"_id":"public/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1556459714831},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1556459714831},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1556459714831},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1556459714832},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1556459714839},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1556459714840},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1556459714840},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1556459714842},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1556459714842},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1556459714889},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1556459714892},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1556459714921},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1556459714939},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1556459714952},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1556459714959},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1556459714959},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1556459714972},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1556459714978},{"_id":"source/_posts/2019-04-28-markdownTool.md","hash":"df1827f6f87fc80ab8d21ddb29a71827af540b39","modified":1556459796263},{"_id":"public/2019/04/28/2019-04-28-markdownTool/index.html","hash":"fdebe0351a70c3de2147c672f36b9573c244e93c","modified":1556547258628},{"_id":"public/tags/工具/index.html","hash":"c77565d28fad054b29c33360cd335c2039c4a5db","modified":1556547258679},{"_id":"source/_posts/2019-04-29-graduate.md","hash":"b237556db7f8b8e087cc25609610fa881b9bbb9a","modified":1556547160135},{"_id":"public/2019/04/29/2019-04-29-graduate/index.html","hash":"2ca8be99af57823e1e2201edbdc278a69d999f91","modified":1556547258680},{"_id":"public/tags/graduate/index.html","hash":"c0047565c57d31451814f98d78d8077b4dad532b","modified":1556547258680}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"个人站点建站过程","subtitle":"Github Github-pages Git Node.js Hexo Next","date":"2019-04-23T16:00:00.000Z","author":"timeflies","header-img":"img/post-bg-ios9-web.jpg","catalog":true,"_content":"\n  hexo是一个博客建站工具，可以有多种theme，Next是其中一种\n\n\n  # 教程\n\n    https://retzzz.github.io/2018/09/02/buildblog/\n    https://godweiyang.com/2018/04/13/hexo-blog/\n    https://github.com/baoyuzhang/baoyuzhang.github.io\n    https://www.jianshu.com/p/84a8384be1ae\n    https://juejin.im/post/5acf02086fb9a028b92d8652\n\n  # Hexo具体设置\n\n    https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\n\n  # 不错的主题\n    https://github.com/SuperKieran/TKL\n    https://blog.zhangruipeng.me/hexo-theme-icarus/\n    https://haojen.github.io/Claudia-theme-blog/\n    http://gjy3035.github.io/\n\n  # 进阶玩法\n    图床问题、背景音乐\n\n    博客文章加密\n    https://www.jianshu.com/p/44e211829447\n    https://blog.csdn.net/Lancelot_Lewis/article/details/53422901\n\n    https://segmentfault.com/a/1190000009009697\n    https://zhuanlan.zhihu.com/p/33616481\n    https://segmentfault.com/a/1190000009009697\n\n  # 动态页面html5\n\n    https://github.com/lfkid/lfkid.github.io\n\n\n  # 动态网站\n    https://zhuanlan.zhihu.com/p/38480155\n\n  # 建立的较好的网站\n\n    http://guanying.me/\n    https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/\n\n  # 参考文献\n    [1] http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa\n    [2] Hexo官网 https://hexo.io/zh-cn/docs/index.html\n    [3] Next官网 http://theme-next.iissnan.com/faqs.html\n","source":"_posts/2019-04-24-个人站点建站过程.md","raw":"---\nlayout:     post\ntitle:      个人站点建站过程\nsubtitle:   Github Github-pages Git Node.js Hexo Next\ndate:       2019-04-24\nauthor:     timeflies\nheader-img: img/post-bg-ios9-web.jpg\ncatalog: true\ntags:\n    - Hexo\n    - 建站\n    - Git\n---\n\n  hexo是一个博客建站工具，可以有多种theme，Next是其中一种\n\n\n  # 教程\n\n    https://retzzz.github.io/2018/09/02/buildblog/\n    https://godweiyang.com/2018/04/13/hexo-blog/\n    https://github.com/baoyuzhang/baoyuzhang.github.io\n    https://www.jianshu.com/p/84a8384be1ae\n    https://juejin.im/post/5acf02086fb9a028b92d8652\n\n  # Hexo具体设置\n\n    https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\n\n  # 不错的主题\n    https://github.com/SuperKieran/TKL\n    https://blog.zhangruipeng.me/hexo-theme-icarus/\n    https://haojen.github.io/Claudia-theme-blog/\n    http://gjy3035.github.io/\n\n  # 进阶玩法\n    图床问题、背景音乐\n\n    博客文章加密\n    https://www.jianshu.com/p/44e211829447\n    https://blog.csdn.net/Lancelot_Lewis/article/details/53422901\n\n    https://segmentfault.com/a/1190000009009697\n    https://zhuanlan.zhihu.com/p/33616481\n    https://segmentfault.com/a/1190000009009697\n\n  # 动态页面html5\n\n    https://github.com/lfkid/lfkid.github.io\n\n\n  # 动态网站\n    https://zhuanlan.zhihu.com/p/38480155\n\n  # 建立的较好的网站\n\n    http://guanying.me/\n    https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/\n\n  # 参考文献\n    [1] http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa\n    [2] Hexo官网 https://hexo.io/zh-cn/docs/index.html\n    [3] Next官网 http://theme-next.iissnan.com/faqs.html\n","slug":"2019-04-24-个人站点建站过程","published":1,"updated":"2019-04-27T12:27:01.152Z","comments":1,"photos":[],"link":"","_id":"cjv0zxdaw0000w0r0nvn1phoz","content":"<p>  hexo是一个博客建站工具，可以有多种theme，Next是其中一种</p>\n<h1 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h1><pre><code>https://retzzz.github.io/2018/09/02/buildblog/\nhttps://godweiyang.com/2018/04/13/hexo-blog/\nhttps://github.com/baoyuzhang/baoyuzhang.github.io\nhttps://www.jianshu.com/p/84a8384be1ae\nhttps://juejin.im/post/5acf02086fb9a028b92d8652\n</code></pre><h1 id=\"Hexo具体设置\"><a href=\"#Hexo具体设置\" class=\"headerlink\" title=\"Hexo具体设置\"></a>Hexo具体设置</h1><pre><code>https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\n</code></pre><h1 id=\"不错的主题\"><a href=\"#不错的主题\" class=\"headerlink\" title=\"不错的主题\"></a>不错的主题</h1><pre><code>https://github.com/SuperKieran/TKL\nhttps://blog.zhangruipeng.me/hexo-theme-icarus/\nhttps://haojen.github.io/Claudia-theme-blog/\nhttp://gjy3035.github.io/\n</code></pre><h1 id=\"进阶玩法\"><a href=\"#进阶玩法\" class=\"headerlink\" title=\"进阶玩法\"></a>进阶玩法</h1><pre><code>图床问题、背景音乐\n\n博客文章加密\nhttps://www.jianshu.com/p/44e211829447\nhttps://blog.csdn.net/Lancelot_Lewis/article/details/53422901\n\nhttps://segmentfault.com/a/1190000009009697\nhttps://zhuanlan.zhihu.com/p/33616481\nhttps://segmentfault.com/a/1190000009009697\n</code></pre><h1 id=\"动态页面html5\"><a href=\"#动态页面html5\" class=\"headerlink\" title=\"动态页面html5\"></a>动态页面html5</h1><pre><code>https://github.com/lfkid/lfkid.github.io\n</code></pre><h1 id=\"动态网站\"><a href=\"#动态网站\" class=\"headerlink\" title=\"动态网站\"></a>动态网站</h1><pre><code>https://zhuanlan.zhihu.com/p/38480155\n</code></pre><h1 id=\"建立的较好的网站\"><a href=\"#建立的较好的网站\" class=\"headerlink\" title=\"建立的较好的网站\"></a>建立的较好的网站</h1><pre><code>http://guanying.me/\nhttps://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/\n</code></pre><h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><pre><code>[1] http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa\n[2] Hexo官网 https://hexo.io/zh-cn/docs/index.html\n[3] Next官网 http://theme-next.iissnan.com/faqs.html\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>  hexo是一个博客建站工具，可以有多种theme，Next是其中一种</p>\n<h1 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h1><pre><code>https://retzzz.github.io/2018/09/02/buildblog/\nhttps://godweiyang.com/2018/04/13/hexo-blog/\nhttps://github.com/baoyuzhang/baoyuzhang.github.io\nhttps://www.jianshu.com/p/84a8384be1ae\nhttps://juejin.im/post/5acf02086fb9a028b92d8652\n</code></pre><h1 id=\"Hexo具体设置\"><a href=\"#Hexo具体设置\" class=\"headerlink\" title=\"Hexo具体设置\"></a>Hexo具体设置</h1><pre><code>https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\n</code></pre><h1 id=\"不错的主题\"><a href=\"#不错的主题\" class=\"headerlink\" title=\"不错的主题\"></a>不错的主题</h1><pre><code>https://github.com/SuperKieran/TKL\nhttps://blog.zhangruipeng.me/hexo-theme-icarus/\nhttps://haojen.github.io/Claudia-theme-blog/\nhttp://gjy3035.github.io/\n</code></pre><h1 id=\"进阶玩法\"><a href=\"#进阶玩法\" class=\"headerlink\" title=\"进阶玩法\"></a>进阶玩法</h1><pre><code>图床问题、背景音乐\n\n博客文章加密\nhttps://www.jianshu.com/p/44e211829447\nhttps://blog.csdn.net/Lancelot_Lewis/article/details/53422901\n\nhttps://segmentfault.com/a/1190000009009697\nhttps://zhuanlan.zhihu.com/p/33616481\nhttps://segmentfault.com/a/1190000009009697\n</code></pre><h1 id=\"动态页面html5\"><a href=\"#动态页面html5\" class=\"headerlink\" title=\"动态页面html5\"></a>动态页面html5</h1><pre><code>https://github.com/lfkid/lfkid.github.io\n</code></pre><h1 id=\"动态网站\"><a href=\"#动态网站\" class=\"headerlink\" title=\"动态网站\"></a>动态网站</h1><pre><code>https://zhuanlan.zhihu.com/p/38480155\n</code></pre><h1 id=\"建立的较好的网站\"><a href=\"#建立的较好的网站\" class=\"headerlink\" title=\"建立的较好的网站\"></a>建立的较好的网站</h1><pre><code>http://guanying.me/\nhttps://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/\n</code></pre><h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><pre><code>[1] http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa\n[2] Hexo官网 https://hexo.io/zh-cn/docs/index.html\n[3] Next官网 http://theme-next.iissnan.com/faqs.html\n</code></pre>"},{"title":"博客写作内容及分类","date":"2019-04-26T12:19:38.000Z","header_image":"/intro/post-bg2.jpg","_content":"\n# 博客的写作类别有以下几种：\n\n  1. 技术性问题\n  2. 项目\n  3. 兴趣\n  4. sadad\n","source":"_posts/2019-04-26-博客写作内容.md","raw":"---\ntitle: 博客写作内容及分类\ndate: 2019-04-26 20:19:38\ntags:\n- 写作\n- 分类\n- Tags\nheader_image: /intro/post-bg2.jpg\n---\n\n# 博客的写作类别有以下几种：\n\n  1. 技术性问题\n  2. 项目\n  3. 兴趣\n  4. sadad\n","slug":"2019-04-26-博客写作内容","published":1,"updated":"2019-04-27T12:48:04.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0zxdb70001w0r04sj1kluy","content":"<h1 id=\"博客的写作类别有以下几种：\"><a href=\"#博客的写作类别有以下几种：\" class=\"headerlink\" title=\"博客的写作类别有以下几种：\"></a>博客的写作类别有以下几种：</h1><ol>\n<li>技术性问题</li>\n<li>项目</li>\n<li>兴趣</li>\n<li>sadad</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"博客的写作类别有以下几种：\"><a href=\"#博客的写作类别有以下几种：\" class=\"headerlink\" title=\"博客的写作类别有以下几种：\"></a>博客的写作类别有以下几种：</h1><ol>\n<li>技术性问题</li>\n<li>项目</li>\n<li>兴趣</li>\n<li>sadad</li>\n</ol>\n"},{"layout":"post","title":"Git指令整理","subtitle":"常用的 Git 指令","date":"2019-04-22T16:00:00.000Z","author":"timeflies","header-img":"img/post-bg-ios9-web.jpg","catalog":true,"_content":"\n>随便整理的一些自用的Git指令\n\n\n# GitHub创建仓库提示代码\n\n\techo \"# 项目名\" >> README.md\n\tgit init\n\tgit add README.md\n\tgit commit -m \"first commit\"\n\tgit remote add origin git@github.com:qiubaiying/项目名.git\n\tgit push -u origin master\n\n若仓库存在直接push\n\n\tgit remote add origin git@github.com:qiubaiying/test.git\n\tgit push -u origin master\n\n\n# 常用操作\n\n#### 创建仓库（初始化）\n\t在当前指定目录下创建\n\tgit init\n\n\t新建一个仓库目录\n\tgit init [project-name]\n\n\t克隆一个远程项目\n\tgit clone [url]\n\n#### 添加文件到缓存区\n\n\t添加所有变化的文件\n \tgit add .\n\n\t添加名称指定文件\n\tgit add text.txt\n\n#### 配置\n\n\t设置提交代码时的用户信息\n\tgit config [--global] user.name \"[name]\"\n\tgit config [--global] user.email \"[email address]\"\n\n\n#### 提交\n\t提交暂存区到仓库区\n\tgit commit -m \"msg\"\n\n\t# 提交暂存区的指定文件到仓库区\n\t$ git commit [file1] [file2] ... -m [message]\n\n\t# 提交工作区自上次commit之后的变化，直接到仓库区\n\t$ git commit -a\n\n\t# 提交时显示所有diff信息\n\t$ git commit -v\n\n\t# 使用一次新的commit，替代上一次提交\n\t# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\t$ git commit --amend -m [message]\n\n\t# 重做上一次commit，并包括指定文件的新变化\n\t$ git commit --amend [file1] [file2] ...\n\n#### 远程同步\n\n\t# 下载远程仓库的所有变动\n\t$ git fetch [remote]\n\n\t# 显示所有远程仓库\n\t$ git remote -v\n\n\t# 显示某个远程仓库的信息\n\t$ git remote show [remote]\n\n\t# 增加一个新的远程仓库，并命名\n\t$ git remote add [shortname] [url]\n\n\t# 取回远程仓库的变化，并与本地分支合并\n\t$ git pull [remote] [branch]\n\n\t# 上传本地指定分支到远程仓库\n\t$ git push [remote] [branch]\n\n\t# 强行推送当前分支到远程仓库，即使有冲突\n\t$ git push [remote] --force\n\n\t# 推送所有分支到远程仓库\n\t$ git push [remote] --all\n\n\n\n#### 分支\n\n\t# 列出所有本地分支\n\t$ git branch\n\n\t# 列出所有远程分支\n\t$ git branch -r\n\n\t# 列出所有本地分支和远程分支\n\t$ git branch -a\n\n\t# 新建一个分支，但依然停留在当前分支\n\t$ git branch [branch-name]\n\n\t# 新建一个分支，并切换到该分支\n\t$ git checkout -b [branch]\n\n\t# 新建一个分支，指向指定commit\n\t$ git branch [branch] [commit]\n\n\t# 新建一个分支，与指定的远程分支建立追踪关系\n\t$ git branch --track [branch] [remote-branch]\n\n\t# 切换到指定分支，并更新工作区\n\t$ git checkout [branch-name]\n\n\t# 切换到上一个分支\n\t$ git checkout -\n\n\t# 建立追踪关系，在现有分支与指定的远程分支之间\n\t$ git branch --set-upstream [branch] [remote-branch]\n\n\t# 合并指定分支到当前分支\n\t$ git merge [branch]\n\n\t# 选择一个commit，合并进当前分支\n\t$ git cherry-pick [commit]\n\n\t# 删除分支\n\t$ git branch -d [branch-name]\n\n\t# 删除远程分支\n\t$ git push origin --delete [branch-name]\n\t$ git branch -dr [remote/branch]\n\n#### 标签Tags\n\n\t添加标签 在当前commit\n\tgit tag -a v1.0 -m 'xxx'\n\n\t添加标签 在指定commit\n\tgit tag v1.0 [commit]\n\n\t查看\n\tgit tag\n\n\t删除\n\tgit tag -d V1.0\n\n\t删除远程tag\n\tgit push origin :refs/tags/[tagName]\n\n\t推送\n\tgit push origin --tags\n\n\t拉取\n\tgit fetch origin tag V1.0\n\n\t新建一个分支，指向某个tag\n\tgit checkout -b [branch] [tag]\n\n#### 查看信息\n\n\t# 显示有变更的文件\n\t$ git status\n\n\t# 显示当前分支的版本历史\n\t$ git log\n\n\t# 显示commit历史，以及每次commit发生变更的文件\n\t$ git log --stat\n\n\t# 搜索提交历史，根据关键词\n\t$ git log -S [keyword]\n\n\t# 显示某个commit之后的所有变动，每个commit占据一行\n\t$ git log [tag] HEAD --pretty=format:%s\n\n\t# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\t$ git log [tag] HEAD --grep feature\n\n\t# 显示某个文件的版本历史，包括文件改名\n\t$ git log --follow [file]\n\t$ git whatchanged [file]\n\n\t# 显示指定文件相关的每一次diff\n\t$ git log -p [file]\n\n\t# 显示过去5次提交\n\t$ git log -5 --pretty --oneline\n\n\t# 显示所有提交过的用户，按提交次数排序\n\t$ git shortlog -sn\n\n\t# 显示指定文件是什么人在什么时间修改过\n\t$ git blame [file]\n\n\t# 显示暂存区和工作区的差异\n\t$ git diff\n\n\t# 显示暂存区和上一个commit的差异\n\t$ git diff --cached [file]\n\n\t# 显示工作区与当前分支最新commit之间的差异\n\t$ git diff HEAD\n\n\t# 显示两次提交之间的差异\n\t$ git diff [first-branch]...[second-branch]\n\n\t# 显示今天你写了多少行代码\n\t$ git diff --shortstat \"@{0 day ago}\"\n\n\t# 显示某次提交的元数据和内容变化\n\t$ git show [commit]\n\n\t# 显示某次提交发生变化的文件\n\t$ git show --name-only [commit]\n\n\t# 显示某次提交时，某个文件的内容\n\t$ git show [commit]:[filename]\n\n\t# 显示当前分支的最近几次提交\n\t$ git reflog\n\n#### 撤销\n\n\t# 恢复暂存区的指定文件到工作区\n\t$ git checkout [file]\n\n\t# 恢复某个commit的指定文件到暂存区和工作区\n\t$ git checkout [commit] [file]\n\n\t# 恢复暂存区的所有文件到工作区\n\t$ git checkout .\n\n\t# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\t$ git reset [file]\n\n\t# 重置暂存区与工作区，与上一次commit保持一致\n\t$ git reset --hard\n\n\t# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\t$ git reset [commit]\n\n\t# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\t$ git reset --hard [commit]\n\n\t# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\t$ git reset --keep [commit]\n\n\t# 新建一个commit，用来撤销指定commit\n\t# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\t$ git revert [commit]\n\n\t# 暂时将未提交的变化移除，稍后再移入\n\t$ git stash\n\t$ git stash pop\n\n#### 其他\n\n\t# 生成一个可供发布的压缩包\n\t$ git archives\n\n\n\n# 使用 .gitignore 忽略 Git 仓库中的文件\n\n> 使用 `.gitignore` 文件忽略指定文件\n\n## .gitignore\n\n在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的`.DS_Store`文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用`.gitignore`就能够在Git提交时自动忽略掉这些文件。\n\n\n\n## 忽略的格式\n\n- `#` :此为注释 – 将被 Git 忽略\n- `*.a` :忽略所有 `.a` 结尾的文件\n- `!lib.a` : 不忽略 `lib.a` 文件\n- `/TODO` :仅仅忽略项目根目录下的 `TODO` 文件,不包括 `subdir/TODO`\n- `build/` : 忽略 `build/` 目录下的所有文件\n- `doc/*.txt` : 会忽略 `doc/notes.txt` 但不包括 `doc/server/arch.txt`\n\n## 创建方法\n\n#### 从 [github](https://github.com/github/gitignore.git) 上获取\n\ngithub上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取\n\n\thttps://github.com/github/gitignore.git\n\n与 Xcode 相关的三个文件\n\n- Xcode.gitignore\n- Objective-C.gitignore\n- Swift.gitignore\n\n`Xcode.gitignore`忽略 `Xcode` 配置信息，如操作记录，默认打开窗口等\n\n其他两个在 `Xcode.gitignore` 基础上针对不同的语言进行忽略\n\n将这些文件重写命名为 `.gittignore`\n\n\t$ mv Swift.gitignore .gittignore\n\n#### 通过 [gitignore.io](https://www.gitignore.io/) 创建（推荐）\n\n###### 先自定义终端命令：\n\nmacOS下默认是`\\#!/bin/bash`：\n\n\t$ echo \"function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}\" >> ~/.bash_profile && source ~/.bash_profile\n\n如果是 `#!/bin/zsh`\n\n\t$ echo \"function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}\" >> ~/.zshrc && source ~/.zshrc\n\n###### 使用\n\n在当前终端目录下\n\n\t$ gi swift > .gitignore\n\n\n就会针对 Swifit 类型的工程创建 `.gitignore` 文件。\n\n\n## Git代码回滚\n\n>并不适合阅读的个人文档。\n\n# **git revert** 和 **git reset** 的区别\n 先看图：\n\n![](https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg)\n\n**sourceTree** 中 **revert** 译为**`提交回滚`**，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。\n\n**reset** 为 **重置到这次提交**，将内容重置到指定的版本。`git reset` 命令后面是需要加2种参数的：`–-hard` 和 `–-soft`。这条命令默认情况下是 `-–soft`。\n\n执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用`git status` 命令可以在缓冲区中看到这些修改。而如果加上`-–hard`参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 `git push origin HEAD --force` 强制将分区内容推送到远程服务器。\n\n\n#### 代码回退\n\n默认参数 `-soft`,所有commit的修改都会退回到git缓冲区\n参数`--hard`，所有commit的修改直接丢弃\n\n\t$ git reset --hard HEAD^ \t\t回退到上个版本\n\t$ git reset --hard commit_id\t退到/进到 指定commit_id\n推送到远程\n\n\t$ git push origin HEAD --force\n\n\n#### 可以吃的后悔药->版本穿梭\n\n当你回滚之后，又后悔了，想恢复到新的版本怎么办？\n\n用`git reflog`打印你记录你的每一次操作记录\n\n\t$ git reflog\n\n\t输出：\n\tc7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687\n\t470e9c2 HEAD@{1}: reset: moving to 470e9c2\n\tb45959e HEAD@{2}: revert: Revert \"add img\"\n\t470e9c2 HEAD@{3}: reset: moving to 470e9c2\n\t2c26183 HEAD@{4}: reset: moving to 2c26183\n\t0f67bb7 HEAD@{5}: revert: Revert \"add img\"\n\n找到你操作的id如：`b45959e`，就可以回退到这个版本\n\n\t$ git reset --hard b45959e\n","source":"_posts/2019-04-23-Git指令整理.md","raw":"---\nlayout:     post\ntitle:      Git指令整理\nsubtitle:   常用的 Git 指令\ndate:       2019-04-23\nauthor:     timeflies\nheader-img: img/post-bg-ios9-web.jpg\ncatalog: true\ntags:\n    - Git\n---\n\n>随便整理的一些自用的Git指令\n\n\n# GitHub创建仓库提示代码\n\n\techo \"# 项目名\" >> README.md\n\tgit init\n\tgit add README.md\n\tgit commit -m \"first commit\"\n\tgit remote add origin git@github.com:qiubaiying/项目名.git\n\tgit push -u origin master\n\n若仓库存在直接push\n\n\tgit remote add origin git@github.com:qiubaiying/test.git\n\tgit push -u origin master\n\n\n# 常用操作\n\n#### 创建仓库（初始化）\n\t在当前指定目录下创建\n\tgit init\n\n\t新建一个仓库目录\n\tgit init [project-name]\n\n\t克隆一个远程项目\n\tgit clone [url]\n\n#### 添加文件到缓存区\n\n\t添加所有变化的文件\n \tgit add .\n\n\t添加名称指定文件\n\tgit add text.txt\n\n#### 配置\n\n\t设置提交代码时的用户信息\n\tgit config [--global] user.name \"[name]\"\n\tgit config [--global] user.email \"[email address]\"\n\n\n#### 提交\n\t提交暂存区到仓库区\n\tgit commit -m \"msg\"\n\n\t# 提交暂存区的指定文件到仓库区\n\t$ git commit [file1] [file2] ... -m [message]\n\n\t# 提交工作区自上次commit之后的变化，直接到仓库区\n\t$ git commit -a\n\n\t# 提交时显示所有diff信息\n\t$ git commit -v\n\n\t# 使用一次新的commit，替代上一次提交\n\t# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\t$ git commit --amend -m [message]\n\n\t# 重做上一次commit，并包括指定文件的新变化\n\t$ git commit --amend [file1] [file2] ...\n\n#### 远程同步\n\n\t# 下载远程仓库的所有变动\n\t$ git fetch [remote]\n\n\t# 显示所有远程仓库\n\t$ git remote -v\n\n\t# 显示某个远程仓库的信息\n\t$ git remote show [remote]\n\n\t# 增加一个新的远程仓库，并命名\n\t$ git remote add [shortname] [url]\n\n\t# 取回远程仓库的变化，并与本地分支合并\n\t$ git pull [remote] [branch]\n\n\t# 上传本地指定分支到远程仓库\n\t$ git push [remote] [branch]\n\n\t# 强行推送当前分支到远程仓库，即使有冲突\n\t$ git push [remote] --force\n\n\t# 推送所有分支到远程仓库\n\t$ git push [remote] --all\n\n\n\n#### 分支\n\n\t# 列出所有本地分支\n\t$ git branch\n\n\t# 列出所有远程分支\n\t$ git branch -r\n\n\t# 列出所有本地分支和远程分支\n\t$ git branch -a\n\n\t# 新建一个分支，但依然停留在当前分支\n\t$ git branch [branch-name]\n\n\t# 新建一个分支，并切换到该分支\n\t$ git checkout -b [branch]\n\n\t# 新建一个分支，指向指定commit\n\t$ git branch [branch] [commit]\n\n\t# 新建一个分支，与指定的远程分支建立追踪关系\n\t$ git branch --track [branch] [remote-branch]\n\n\t# 切换到指定分支，并更新工作区\n\t$ git checkout [branch-name]\n\n\t# 切换到上一个分支\n\t$ git checkout -\n\n\t# 建立追踪关系，在现有分支与指定的远程分支之间\n\t$ git branch --set-upstream [branch] [remote-branch]\n\n\t# 合并指定分支到当前分支\n\t$ git merge [branch]\n\n\t# 选择一个commit，合并进当前分支\n\t$ git cherry-pick [commit]\n\n\t# 删除分支\n\t$ git branch -d [branch-name]\n\n\t# 删除远程分支\n\t$ git push origin --delete [branch-name]\n\t$ git branch -dr [remote/branch]\n\n#### 标签Tags\n\n\t添加标签 在当前commit\n\tgit tag -a v1.0 -m 'xxx'\n\n\t添加标签 在指定commit\n\tgit tag v1.0 [commit]\n\n\t查看\n\tgit tag\n\n\t删除\n\tgit tag -d V1.0\n\n\t删除远程tag\n\tgit push origin :refs/tags/[tagName]\n\n\t推送\n\tgit push origin --tags\n\n\t拉取\n\tgit fetch origin tag V1.0\n\n\t新建一个分支，指向某个tag\n\tgit checkout -b [branch] [tag]\n\n#### 查看信息\n\n\t# 显示有变更的文件\n\t$ git status\n\n\t# 显示当前分支的版本历史\n\t$ git log\n\n\t# 显示commit历史，以及每次commit发生变更的文件\n\t$ git log --stat\n\n\t# 搜索提交历史，根据关键词\n\t$ git log -S [keyword]\n\n\t# 显示某个commit之后的所有变动，每个commit占据一行\n\t$ git log [tag] HEAD --pretty=format:%s\n\n\t# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\t$ git log [tag] HEAD --grep feature\n\n\t# 显示某个文件的版本历史，包括文件改名\n\t$ git log --follow [file]\n\t$ git whatchanged [file]\n\n\t# 显示指定文件相关的每一次diff\n\t$ git log -p [file]\n\n\t# 显示过去5次提交\n\t$ git log -5 --pretty --oneline\n\n\t# 显示所有提交过的用户，按提交次数排序\n\t$ git shortlog -sn\n\n\t# 显示指定文件是什么人在什么时间修改过\n\t$ git blame [file]\n\n\t# 显示暂存区和工作区的差异\n\t$ git diff\n\n\t# 显示暂存区和上一个commit的差异\n\t$ git diff --cached [file]\n\n\t# 显示工作区与当前分支最新commit之间的差异\n\t$ git diff HEAD\n\n\t# 显示两次提交之间的差异\n\t$ git diff [first-branch]...[second-branch]\n\n\t# 显示今天你写了多少行代码\n\t$ git diff --shortstat \"@{0 day ago}\"\n\n\t# 显示某次提交的元数据和内容变化\n\t$ git show [commit]\n\n\t# 显示某次提交发生变化的文件\n\t$ git show --name-only [commit]\n\n\t# 显示某次提交时，某个文件的内容\n\t$ git show [commit]:[filename]\n\n\t# 显示当前分支的最近几次提交\n\t$ git reflog\n\n#### 撤销\n\n\t# 恢复暂存区的指定文件到工作区\n\t$ git checkout [file]\n\n\t# 恢复某个commit的指定文件到暂存区和工作区\n\t$ git checkout [commit] [file]\n\n\t# 恢复暂存区的所有文件到工作区\n\t$ git checkout .\n\n\t# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\t$ git reset [file]\n\n\t# 重置暂存区与工作区，与上一次commit保持一致\n\t$ git reset --hard\n\n\t# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\t$ git reset [commit]\n\n\t# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\t$ git reset --hard [commit]\n\n\t# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\t$ git reset --keep [commit]\n\n\t# 新建一个commit，用来撤销指定commit\n\t# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\t$ git revert [commit]\n\n\t# 暂时将未提交的变化移除，稍后再移入\n\t$ git stash\n\t$ git stash pop\n\n#### 其他\n\n\t# 生成一个可供发布的压缩包\n\t$ git archives\n\n\n\n# 使用 .gitignore 忽略 Git 仓库中的文件\n\n> 使用 `.gitignore` 文件忽略指定文件\n\n## .gitignore\n\n在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的`.DS_Store`文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用`.gitignore`就能够在Git提交时自动忽略掉这些文件。\n\n\n\n## 忽略的格式\n\n- `#` :此为注释 – 将被 Git 忽略\n- `*.a` :忽略所有 `.a` 结尾的文件\n- `!lib.a` : 不忽略 `lib.a` 文件\n- `/TODO` :仅仅忽略项目根目录下的 `TODO` 文件,不包括 `subdir/TODO`\n- `build/` : 忽略 `build/` 目录下的所有文件\n- `doc/*.txt` : 会忽略 `doc/notes.txt` 但不包括 `doc/server/arch.txt`\n\n## 创建方法\n\n#### 从 [github](https://github.com/github/gitignore.git) 上获取\n\ngithub上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取\n\n\thttps://github.com/github/gitignore.git\n\n与 Xcode 相关的三个文件\n\n- Xcode.gitignore\n- Objective-C.gitignore\n- Swift.gitignore\n\n`Xcode.gitignore`忽略 `Xcode` 配置信息，如操作记录，默认打开窗口等\n\n其他两个在 `Xcode.gitignore` 基础上针对不同的语言进行忽略\n\n将这些文件重写命名为 `.gittignore`\n\n\t$ mv Swift.gitignore .gittignore\n\n#### 通过 [gitignore.io](https://www.gitignore.io/) 创建（推荐）\n\n###### 先自定义终端命令：\n\nmacOS下默认是`\\#!/bin/bash`：\n\n\t$ echo \"function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}\" >> ~/.bash_profile && source ~/.bash_profile\n\n如果是 `#!/bin/zsh`\n\n\t$ echo \"function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}\" >> ~/.zshrc && source ~/.zshrc\n\n###### 使用\n\n在当前终端目录下\n\n\t$ gi swift > .gitignore\n\n\n就会针对 Swifit 类型的工程创建 `.gitignore` 文件。\n\n\n## Git代码回滚\n\n>并不适合阅读的个人文档。\n\n# **git revert** 和 **git reset** 的区别\n 先看图：\n\n![](https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg)\n\n**sourceTree** 中 **revert** 译为**`提交回滚`**，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。\n\n**reset** 为 **重置到这次提交**，将内容重置到指定的版本。`git reset` 命令后面是需要加2种参数的：`–-hard` 和 `–-soft`。这条命令默认情况下是 `-–soft`。\n\n执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用`git status` 命令可以在缓冲区中看到这些修改。而如果加上`-–hard`参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 `git push origin HEAD --force` 强制将分区内容推送到远程服务器。\n\n\n#### 代码回退\n\n默认参数 `-soft`,所有commit的修改都会退回到git缓冲区\n参数`--hard`，所有commit的修改直接丢弃\n\n\t$ git reset --hard HEAD^ \t\t回退到上个版本\n\t$ git reset --hard commit_id\t退到/进到 指定commit_id\n推送到远程\n\n\t$ git push origin HEAD --force\n\n\n#### 可以吃的后悔药->版本穿梭\n\n当你回滚之后，又后悔了，想恢复到新的版本怎么办？\n\n用`git reflog`打印你记录你的每一次操作记录\n\n\t$ git reflog\n\n\t输出：\n\tc7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687\n\t470e9c2 HEAD@{1}: reset: moving to 470e9c2\n\tb45959e HEAD@{2}: revert: Revert \"add img\"\n\t470e9c2 HEAD@{3}: reset: moving to 470e9c2\n\t2c26183 HEAD@{4}: reset: moving to 2c26183\n\t0f67bb7 HEAD@{5}: revert: Revert \"add img\"\n\n找到你操作的id如：`b45959e`，就可以回退到这个版本\n\n\t$ git reset --hard b45959e\n","slug":"2019-04-23-Git指令整理","published":1,"updated":"2019-04-28T13:56:36.261Z","_id":"cjv0zxdc7000ew0r0rx5cy2i4","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>随便整理的一些自用的Git指令</p>\n</blockquote>\n<h1 id=\"GitHub创建仓库提示代码\"><a href=\"#GitHub创建仓库提示代码\" class=\"headerlink\" title=\"GitHub创建仓库提示代码\"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit remote add origin git@github.com:qiubaiying/项目名.git\ngit push -u origin master\n</code></pre><p>若仓库存在直接push</p>\n<pre><code>git remote add origin git@github.com:qiubaiying/test.git\ngit push -u origin master\n</code></pre><h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><h4 id=\"创建仓库（初始化）\"><a href=\"#创建仓库（初始化）\" class=\"headerlink\" title=\"创建仓库（初始化）\"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建\ngit init\n\n新建一个仓库目录\ngit init [project-name]\n\n克隆一个远程项目\ngit clone [url]\n</code></pre><h4 id=\"添加文件到缓存区\"><a href=\"#添加文件到缓存区\" class=\"headerlink\" title=\"添加文件到缓存区\"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件\n git add .\n\n添加名称指定文件\ngit add text.txt\n</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre><code>设置提交代码时的用户信息\ngit config [--global] user.name &quot;[name]&quot;\ngit config [--global] user.email &quot;[email address]&quot;\n</code></pre><h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><pre><code>提交暂存区到仓库区\ngit commit -m &quot;msg&quot;\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre><h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n</code></pre><h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><pre><code># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre><h4 id=\"标签Tags\"><a href=\"#标签Tags\" class=\"headerlink\" title=\"标签Tags\"></a>标签Tags</h4><pre><code>添加标签 在当前commit\ngit tag -a v1.0 -m &apos;xxx&apos;\n\n添加标签 在指定commit\ngit tag v1.0 [commit]\n\n查看\ngit tag\n\n删除\ngit tag -d V1.0\n\n删除远程tag\ngit push origin :refs/tags/[tagName]\n\n推送\ngit push origin --tags\n\n拉取\ngit fetch origin tag V1.0\n\n新建一个分支，指向某个tag\ngit checkout -b [branch] [tag]\n</code></pre><h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><pre><code># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre><h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre><h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><pre><code># 生成一个可供发布的压缩包\n$ git archives\n</code></pre><h1 id=\"使用-gitignore-忽略-Git-仓库中的文件\"><a href=\"#使用-gitignore-忽略-Git-仓库中的文件\" class=\"headerlink\" title=\"使用 .gitignore 忽略 Git 仓库中的文件\"></a>使用 .gitignore 忽略 Git 仓库中的文件</h1><blockquote>\n<p>使用 <code>.gitignore</code> 文件忽略指定文件</p>\n</blockquote>\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h2><p>在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的<code>.DS_Store</code>文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用<code>.gitignore</code>就能够在Git提交时自动忽略掉这些文件。</p>\n<h2 id=\"忽略的格式\"><a href=\"#忽略的格式\" class=\"headerlink\" title=\"忽略的格式\"></a>忽略的格式</h2><ul>\n<li><code>#</code> :此为注释 – 将被 Git 忽略</li>\n<li><code>*.a</code> :忽略所有 <code>.a</code> 结尾的文件</li>\n<li><code>!lib.a</code> : 不忽略 <code>lib.a</code> 文件</li>\n<li><code>/TODO</code> :仅仅忽略项目根目录下的 <code>TODO</code> 文件,不包括 <code>subdir/TODO</code></li>\n<li><code>build/</code> : 忽略 <code>build/</code> 目录下的所有文件</li>\n<li><code>doc/*.txt</code> : 会忽略 <code>doc/notes.txt</code> 但不包括 <code>doc/server/arch.txt</code></li>\n</ul>\n<h2 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h2><h4 id=\"从-github-上获取\"><a href=\"#从-github-上获取\" class=\"headerlink\" title=\"从 github 上获取\"></a>从 <a href=\"https://github.com/github/gitignore.git\" target=\"_blank\" rel=\"noopener\">github</a> 上获取</h4><p>github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取</p>\n<pre><code>https://github.com/github/gitignore.git\n</code></pre><p>与 Xcode 相关的三个文件</p>\n<ul>\n<li>Xcode.gitignore</li>\n<li>Objective-C.gitignore</li>\n<li>Swift.gitignore</li>\n</ul>\n<p><code>Xcode.gitignore</code>忽略 <code>Xcode</code> 配置信息，如操作记录，默认打开窗口等</p>\n<p>其他两个在 <code>Xcode.gitignore</code> 基础上针对不同的语言进行忽略</p>\n<p>将这些文件重写命名为 <code>.gittignore</code></p>\n<pre><code>$ mv Swift.gitignore .gittignore\n</code></pre><h4 id=\"通过-gitignore-io-创建（推荐）\"><a href=\"#通过-gitignore-io-创建（推荐）\" class=\"headerlink\" title=\"通过 gitignore.io 创建（推荐）\"></a>通过 <a href=\"https://www.gitignore.io/\" target=\"_blank\" rel=\"noopener\">gitignore.io</a> 创建（推荐）</h4><h6 id=\"先自定义终端命令：\"><a href=\"#先自定义终端命令：\" class=\"headerlink\" title=\"先自定义终端命令：\"></a>先自定义终端命令：</h6><p>macOS下默认是<code>\\#!/bin/bash</code>：</p>\n<pre><code>$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}&quot; &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile\n</code></pre><p>如果是 <code>#!/bin/zsh</code></p>\n<pre><code>$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc\n</code></pre><h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><p>在当前终端目录下</p>\n<pre><code>$ gi swift &gt; .gitignore\n</code></pre><p>就会针对 Swifit 类型的工程创建 <code>.gitignore</code> 文件。</p>\n<h2 id=\"Git代码回滚\"><a href=\"#Git代码回滚\" class=\"headerlink\" title=\"Git代码回滚\"></a>Git代码回滚</h2><blockquote>\n<p>并不适合阅读的个人文档。</p>\n</blockquote>\n<h1 id=\"git-revert-和-git-reset-的区别\"><a href=\"#git-revert-和-git-reset-的区别\" class=\"headerlink\" title=\"git revert 和 git reset 的区别\"></a><strong>git revert</strong> 和 <strong>git reset</strong> 的区别</h1><p> 先看图：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg\" alt></p>\n<p><strong>sourceTree</strong> 中 <strong>revert</strong> 译为<strong><code>提交回滚</code></strong>，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。</p>\n<p><strong>reset</strong> 为 <strong>重置到这次提交</strong>，将内容重置到指定的版本。<code>git reset</code> 命令后面是需要加2种参数的：<code>–-hard</code> 和 <code>–-soft</code>。这条命令默认情况下是 <code>-–soft</code>。</p>\n<p>执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用<code>git status</code> 命令可以在缓冲区中看到这些修改。而如果加上<code>-–hard</code>参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 <code>git push origin HEAD --force</code> 强制将分区内容推送到远程服务器。</p>\n<h4 id=\"代码回退\"><a href=\"#代码回退\" class=\"headerlink\" title=\"代码回退\"></a>代码回退</h4><p>默认参数 <code>-soft</code>,所有commit的修改都会退回到git缓冲区<br>参数<code>--hard</code>，所有commit的修改直接丢弃</p>\n<pre><code>$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard commit_id    退到/进到 指定commit_id\n</code></pre><p>推送到远程</p>\n<pre><code>$ git push origin HEAD --force\n</code></pre><h4 id=\"可以吃的后悔药-gt-版本穿梭\"><a href=\"#可以吃的后悔药-gt-版本穿梭\" class=\"headerlink\" title=\"可以吃的后悔药-&gt;版本穿梭\"></a>可以吃的后悔药-&gt;版本穿梭</h4><p>当你回滚之后，又后悔了，想恢复到新的版本怎么办？</p>\n<p>用<code>git reflog</code>打印你记录你的每一次操作记录</p>\n<pre><code>$ git reflog\n\n输出：\nc7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687\n470e9c2 HEAD@{1}: reset: moving to 470e9c2\nb45959e HEAD@{2}: revert: Revert &quot;add img&quot;\n470e9c2 HEAD@{3}: reset: moving to 470e9c2\n2c26183 HEAD@{4}: reset: moving to 2c26183\n0f67bb7 HEAD@{5}: revert: Revert &quot;add img&quot;\n</code></pre><p>找到你操作的id如：<code>b45959e</code>，就可以回退到这个版本</p>\n<pre><code>$ git reset --hard b45959e\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>随便整理的一些自用的Git指令</p>\n</blockquote>\n<h1 id=\"GitHub创建仓库提示代码\"><a href=\"#GitHub创建仓库提示代码\" class=\"headerlink\" title=\"GitHub创建仓库提示代码\"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit remote add origin git@github.com:qiubaiying/项目名.git\ngit push -u origin master\n</code></pre><p>若仓库存在直接push</p>\n<pre><code>git remote add origin git@github.com:qiubaiying/test.git\ngit push -u origin master\n</code></pre><h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><h4 id=\"创建仓库（初始化）\"><a href=\"#创建仓库（初始化）\" class=\"headerlink\" title=\"创建仓库（初始化）\"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建\ngit init\n\n新建一个仓库目录\ngit init [project-name]\n\n克隆一个远程项目\ngit clone [url]\n</code></pre><h4 id=\"添加文件到缓存区\"><a href=\"#添加文件到缓存区\" class=\"headerlink\" title=\"添加文件到缓存区\"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件\n git add .\n\n添加名称指定文件\ngit add text.txt\n</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre><code>设置提交代码时的用户信息\ngit config [--global] user.name &quot;[name]&quot;\ngit config [--global] user.email &quot;[email address]&quot;\n</code></pre><h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><pre><code>提交暂存区到仓库区\ngit commit -m &quot;msg&quot;\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre><h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n</code></pre><h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><pre><code># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre><h4 id=\"标签Tags\"><a href=\"#标签Tags\" class=\"headerlink\" title=\"标签Tags\"></a>标签Tags</h4><pre><code>添加标签 在当前commit\ngit tag -a v1.0 -m &apos;xxx&apos;\n\n添加标签 在指定commit\ngit tag v1.0 [commit]\n\n查看\ngit tag\n\n删除\ngit tag -d V1.0\n\n删除远程tag\ngit push origin :refs/tags/[tagName]\n\n推送\ngit push origin --tags\n\n拉取\ngit fetch origin tag V1.0\n\n新建一个分支，指向某个tag\ngit checkout -b [branch] [tag]\n</code></pre><h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><pre><code># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre><h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre><h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><pre><code># 生成一个可供发布的压缩包\n$ git archives\n</code></pre><h1 id=\"使用-gitignore-忽略-Git-仓库中的文件\"><a href=\"#使用-gitignore-忽略-Git-仓库中的文件\" class=\"headerlink\" title=\"使用 .gitignore 忽略 Git 仓库中的文件\"></a>使用 .gitignore 忽略 Git 仓库中的文件</h1><blockquote>\n<p>使用 <code>.gitignore</code> 文件忽略指定文件</p>\n</blockquote>\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h2><p>在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的<code>.DS_Store</code>文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用<code>.gitignore</code>就能够在Git提交时自动忽略掉这些文件。</p>\n<h2 id=\"忽略的格式\"><a href=\"#忽略的格式\" class=\"headerlink\" title=\"忽略的格式\"></a>忽略的格式</h2><ul>\n<li><code>#</code> :此为注释 – 将被 Git 忽略</li>\n<li><code>*.a</code> :忽略所有 <code>.a</code> 结尾的文件</li>\n<li><code>!lib.a</code> : 不忽略 <code>lib.a</code> 文件</li>\n<li><code>/TODO</code> :仅仅忽略项目根目录下的 <code>TODO</code> 文件,不包括 <code>subdir/TODO</code></li>\n<li><code>build/</code> : 忽略 <code>build/</code> 目录下的所有文件</li>\n<li><code>doc/*.txt</code> : 会忽略 <code>doc/notes.txt</code> 但不包括 <code>doc/server/arch.txt</code></li>\n</ul>\n<h2 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h2><h4 id=\"从-github-上获取\"><a href=\"#从-github-上获取\" class=\"headerlink\" title=\"从 github 上获取\"></a>从 <a href=\"https://github.com/github/gitignore.git\" target=\"_blank\" rel=\"noopener\">github</a> 上获取</h4><p>github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取</p>\n<pre><code>https://github.com/github/gitignore.git\n</code></pre><p>与 Xcode 相关的三个文件</p>\n<ul>\n<li>Xcode.gitignore</li>\n<li>Objective-C.gitignore</li>\n<li>Swift.gitignore</li>\n</ul>\n<p><code>Xcode.gitignore</code>忽略 <code>Xcode</code> 配置信息，如操作记录，默认打开窗口等</p>\n<p>其他两个在 <code>Xcode.gitignore</code> 基础上针对不同的语言进行忽略</p>\n<p>将这些文件重写命名为 <code>.gittignore</code></p>\n<pre><code>$ mv Swift.gitignore .gittignore\n</code></pre><h4 id=\"通过-gitignore-io-创建（推荐）\"><a href=\"#通过-gitignore-io-创建（推荐）\" class=\"headerlink\" title=\"通过 gitignore.io 创建（推荐）\"></a>通过 <a href=\"https://www.gitignore.io/\" target=\"_blank\" rel=\"noopener\">gitignore.io</a> 创建（推荐）</h4><h6 id=\"先自定义终端命令：\"><a href=\"#先自定义终端命令：\" class=\"headerlink\" title=\"先自定义终端命令：\"></a>先自定义终端命令：</h6><p>macOS下默认是<code>\\#!/bin/bash</code>：</p>\n<pre><code>$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}&quot; &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile\n</code></pre><p>如果是 <code>#!/bin/zsh</code></p>\n<pre><code>$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc\n</code></pre><h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><p>在当前终端目录下</p>\n<pre><code>$ gi swift &gt; .gitignore\n</code></pre><p>就会针对 Swifit 类型的工程创建 <code>.gitignore</code> 文件。</p>\n<h2 id=\"Git代码回滚\"><a href=\"#Git代码回滚\" class=\"headerlink\" title=\"Git代码回滚\"></a>Git代码回滚</h2><blockquote>\n<p>并不适合阅读的个人文档。</p>\n</blockquote>\n<h1 id=\"git-revert-和-git-reset-的区别\"><a href=\"#git-revert-和-git-reset-的区别\" class=\"headerlink\" title=\"git revert 和 git reset 的区别\"></a><strong>git revert</strong> 和 <strong>git reset</strong> 的区别</h1><p> 先看图：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg\" alt></p>\n<p><strong>sourceTree</strong> 中 <strong>revert</strong> 译为<strong><code>提交回滚</code></strong>，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。</p>\n<p><strong>reset</strong> 为 <strong>重置到这次提交</strong>，将内容重置到指定的版本。<code>git reset</code> 命令后面是需要加2种参数的：<code>–-hard</code> 和 <code>–-soft</code>。这条命令默认情况下是 <code>-–soft</code>。</p>\n<p>执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用<code>git status</code> 命令可以在缓冲区中看到这些修改。而如果加上<code>-–hard</code>参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 <code>git push origin HEAD --force</code> 强制将分区内容推送到远程服务器。</p>\n<h4 id=\"代码回退\"><a href=\"#代码回退\" class=\"headerlink\" title=\"代码回退\"></a>代码回退</h4><p>默认参数 <code>-soft</code>,所有commit的修改都会退回到git缓冲区<br>参数<code>--hard</code>，所有commit的修改直接丢弃</p>\n<pre><code>$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard commit_id    退到/进到 指定commit_id\n</code></pre><p>推送到远程</p>\n<pre><code>$ git push origin HEAD --force\n</code></pre><h4 id=\"可以吃的后悔药-gt-版本穿梭\"><a href=\"#可以吃的后悔药-gt-版本穿梭\" class=\"headerlink\" title=\"可以吃的后悔药-&gt;版本穿梭\"></a>可以吃的后悔药-&gt;版本穿梭</h4><p>当你回滚之后，又后悔了，想恢复到新的版本怎么办？</p>\n<p>用<code>git reflog</code>打印你记录你的每一次操作记录</p>\n<pre><code>$ git reflog\n\n输出：\nc7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687\n470e9c2 HEAD@{1}: reset: moving to 470e9c2\nb45959e HEAD@{2}: revert: Revert &quot;add img&quot;\n470e9c2 HEAD@{3}: reset: moving to 470e9c2\n2c26183 HEAD@{4}: reset: moving to 2c26183\n0f67bb7 HEAD@{5}: revert: Revert &quot;add img&quot;\n</code></pre><p>找到你操作的id如：<code>b45959e</code>，就可以回退到这个版本</p>\n<pre><code>$ git reset --hard b45959e\n</code></pre>"},{"title":"Markdown工具集","date":"2019-04-27T16:00:00.000Z","_content":"\n\n### 什么是 Markdown\n\n　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字.\n\n　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。               \n　　\n\n  ### 一些基本语法\n    标题            \n    H1 :# Header 1            \n    H2 :## Header 2           \n    H3 :### Header 3           \n    H4 :#### Header 4           \n    H5 :##### Header 5            \n    H6 :###### Header 6      \n    链接 :[Title](URL)        \n    加粗 :**Bold**        \n    斜体字 :*Italics*         \n    删除线 :~~text~~          \n    段落 : 段落之间空一行           \n    换行符 : 一行结束时输入两个空格           \n    列表 :* 添加星号成为一个新的列表项。          \n    引用 :> 引用内容               \n    内嵌代码 : `alert('Hello World');`        \n    画水平线 (HR) :--------          \n\ncss 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。\n\n### 一些好用的 Markdown 编辑器\n\n<br />\n\n[MaHua](http://mahua.jser.me/?utm_source=mindstore.io) 在线 Markdown 编辑器 ,无须测试。\n\n\n<br />\n\n![](/images/posts/markdown/image1.png)\n\n<br />\n\n[Markdown Plus](http://mdp.tylingsoft.com/) 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。\n\n<br />\n\n![](/images/posts/markdown/image2.png)\n\n<br />\n\n[Cmd Markdown](https://www.zybuluo.com/cmd/?utm_source=mindstore.io) 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。\n\n![](/images/posts/markdown/image3.png)\n\n[Macdown](https://github.com/MacDownApp/macdown) Github 上开源的 Mac 平台上的 Markdown 编辑器\n\n[GitBook Editor](https://www.gitbook.com/editor?utm_source=mindstore.io) 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。\n\n\n[Outlinely](http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io) 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。\n\n\n[Classeur](http://classeur.io/?utm_source=mindstore.io) 实用简洁的 Markdown 写作工具，快速上手。\n\n\n[DeerResume](https://github.com/geekcompany/DeerResume?utm_source=mindstore.io) 程序员专用 MarkDown 简历制作在线工具。                \n\n<br>\n\n转载请注明：[潘柏信的博客](http://baixin) » [Markdown工具集](http://baixin.io/2016/11/markdownTool/)                   \n","source":"_posts/2019-04-28-markdownTool.md","raw":"---\ntitle: Markdown工具集\ndate: 2019-04-28\ntags:\n- 工具    \n---\n\n\n### 什么是 Markdown\n\n　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字.\n\n　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。               \n　　\n\n  ### 一些基本语法\n    标题            \n    H1 :# Header 1            \n    H2 :## Header 2           \n    H3 :### Header 3           \n    H4 :#### Header 4           \n    H5 :##### Header 5            \n    H6 :###### Header 6      \n    链接 :[Title](URL)        \n    加粗 :**Bold**        \n    斜体字 :*Italics*         \n    删除线 :~~text~~          \n    段落 : 段落之间空一行           \n    换行符 : 一行结束时输入两个空格           \n    列表 :* 添加星号成为一个新的列表项。          \n    引用 :> 引用内容               \n    内嵌代码 : `alert('Hello World');`        \n    画水平线 (HR) :--------          \n\ncss 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。\n\n### 一些好用的 Markdown 编辑器\n\n<br />\n\n[MaHua](http://mahua.jser.me/?utm_source=mindstore.io) 在线 Markdown 编辑器 ,无须测试。\n\n\n<br />\n\n![](/images/posts/markdown/image1.png)\n\n<br />\n\n[Markdown Plus](http://mdp.tylingsoft.com/) 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。\n\n<br />\n\n![](/images/posts/markdown/image2.png)\n\n<br />\n\n[Cmd Markdown](https://www.zybuluo.com/cmd/?utm_source=mindstore.io) 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。\n\n![](/images/posts/markdown/image3.png)\n\n[Macdown](https://github.com/MacDownApp/macdown) Github 上开源的 Mac 平台上的 Markdown 编辑器\n\n[GitBook Editor](https://www.gitbook.com/editor?utm_source=mindstore.io) 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。\n\n\n[Outlinely](http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io) 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。\n\n\n[Classeur](http://classeur.io/?utm_source=mindstore.io) 实用简洁的 Markdown 写作工具，快速上手。\n\n\n[DeerResume](https://github.com/geekcompany/DeerResume?utm_source=mindstore.io) 程序员专用 MarkDown 简历制作在线工具。                \n\n<br>\n\n转载请注明：[潘柏信的博客](http://baixin) » [Markdown工具集](http://baixin.io/2016/11/markdownTool/)                   \n","slug":"2019-04-28-markdownTool","published":1,"updated":"2019-04-28T13:56:36.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0zzxhy0000pkr03sxdn9pt","content":"<h3 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h3><p>　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字.</p>\n<p>　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。               \n　　</p>\n<h3 id=\"一些基本语法\"><a href=\"#一些基本语法\" class=\"headerlink\" title=\"一些基本语法\"></a>一些基本语法</h3><pre><code>标题            \nH1 :# Header 1            \nH2 :## Header 2           \nH3 :### Header 3           \nH4 :#### Header 4           \nH5 :##### Header 5            \nH6 :###### Header 6      \n链接 :[Title](URL)        \n加粗 :**Bold**        \n斜体字 :*Italics*         \n删除线 :~~text~~          \n段落 : 段落之间空一行           \n换行符 : 一行结束时输入两个空格           \n列表 :* 添加星号成为一个新的列表项。          \n引用 :&gt; 引用内容               \n内嵌代码 : `alert(&apos;Hello World&apos;);`        \n画水平线 (HR) :--------          \n</code></pre><p>css 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。</p>\n<h3 id=\"一些好用的-Markdown-编辑器\"><a href=\"#一些好用的-Markdown-编辑器\" class=\"headerlink\" title=\"一些好用的 Markdown 编辑器\"></a>一些好用的 Markdown 编辑器</h3><p><br></p>\n<p><a href=\"http://mahua.jser.me/?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">MaHua</a> 在线 Markdown 编辑器 ,无须测试。</p>\n<p><br></p>\n<p><img src=\"/images/posts/markdown/image1.png\" alt></p>\n<p><br></p>\n<p><a href=\"http://mdp.tylingsoft.com/\" target=\"_blank\" rel=\"noopener\">Markdown Plus</a> 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。</p>\n<p><br></p>\n<p><img src=\"/images/posts/markdown/image2.png\" alt></p>\n<p><br></p>\n<p><a href=\"https://www.zybuluo.com/cmd/?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a> 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。</p>\n<p><img src=\"/images/posts/markdown/image3.png\" alt></p>\n<p><a href=\"https://github.com/MacDownApp/macdown\" target=\"_blank\" rel=\"noopener\">Macdown</a> Github 上开源的 Mac 平台上的 Markdown 编辑器</p>\n<p><a href=\"https://www.gitbook.com/editor?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">GitBook Editor</a> 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。</p>\n<p><a href=\"http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">Outlinely</a> 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。</p>\n<p><a href=\"http://classeur.io/?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">Classeur</a> 实用简洁的 Markdown 写作工具，快速上手。</p>\n<p><a href=\"https://github.com/geekcompany/DeerResume?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">DeerResume</a> 程序员专用 MarkDown 简历制作在线工具。                </p>\n<p><br></p>\n<p>转载请注明：<a href=\"http://baixin\" target=\"_blank\" rel=\"noopener\">潘柏信的博客</a> » <a href=\"http://baixin.io/2016/11/markdownTool/\" target=\"_blank\" rel=\"noopener\">Markdown工具集</a>                   </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h3><p>　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字.</p>\n<p>　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。               \n　　</p>\n<h3 id=\"一些基本语法\"><a href=\"#一些基本语法\" class=\"headerlink\" title=\"一些基本语法\"></a>一些基本语法</h3><pre><code>标题            \nH1 :# Header 1            \nH2 :## Header 2           \nH3 :### Header 3           \nH4 :#### Header 4           \nH5 :##### Header 5            \nH6 :###### Header 6      \n链接 :[Title](URL)        \n加粗 :**Bold**        \n斜体字 :*Italics*         \n删除线 :~~text~~          \n段落 : 段落之间空一行           \n换行符 : 一行结束时输入两个空格           \n列表 :* 添加星号成为一个新的列表项。          \n引用 :&gt; 引用内容               \n内嵌代码 : `alert(&apos;Hello World&apos;);`        \n画水平线 (HR) :--------          \n</code></pre><p>css 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。</p>\n<h3 id=\"一些好用的-Markdown-编辑器\"><a href=\"#一些好用的-Markdown-编辑器\" class=\"headerlink\" title=\"一些好用的 Markdown 编辑器\"></a>一些好用的 Markdown 编辑器</h3><p><br></p>\n<p><a href=\"http://mahua.jser.me/?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">MaHua</a> 在线 Markdown 编辑器 ,无须测试。</p>\n<p><br></p>\n<p><img src=\"/images/posts/markdown/image1.png\" alt></p>\n<p><br></p>\n<p><a href=\"http://mdp.tylingsoft.com/\" target=\"_blank\" rel=\"noopener\">Markdown Plus</a> 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。</p>\n<p><br></p>\n<p><img src=\"/images/posts/markdown/image2.png\" alt></p>\n<p><br></p>\n<p><a href=\"https://www.zybuluo.com/cmd/?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a> 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。</p>\n<p><img src=\"/images/posts/markdown/image3.png\" alt></p>\n<p><a href=\"https://github.com/MacDownApp/macdown\" target=\"_blank\" rel=\"noopener\">Macdown</a> Github 上开源的 Mac 平台上的 Markdown 编辑器</p>\n<p><a href=\"https://www.gitbook.com/editor?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">GitBook Editor</a> 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。</p>\n<p><a href=\"http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">Outlinely</a> 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。</p>\n<p><a href=\"http://classeur.io/?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">Classeur</a> 实用简洁的 Markdown 写作工具，快速上手。</p>\n<p><a href=\"https://github.com/geekcompany/DeerResume?utm_source=mindstore.io\" target=\"_blank\" rel=\"noopener\">DeerResume</a> 程序员专用 MarkDown 简历制作在线工具。                </p>\n<p><br></p>\n<p>转载请注明：<a href=\"http://baixin\" target=\"_blank\" rel=\"noopener\">潘柏信的博客</a> » <a href=\"http://baixin.io/2016/11/markdownTool/\" target=\"_blank\" rel=\"noopener\">Markdown工具集</a>                   </p>\n"},{"title":"graduate","date":"2019-04-28T16:00:00.000Z","_content":"\n# 毕业论文内容\n将写两个点，即一共做了两个实验：  \n1. 磨削深度与粗糙度的关系  \n2. 临界磨削脆塑转变深度与声发射之间的关系  \n\n\n    实验情况：\n      1. 第一个实验不再补测，只能在现有基础上进行一点创新；\n      2. 第二个实验将要补测，需要提出较为准确的实验方案  \n\n## 1.磨削深度与粗糙度的关系\n创新方向有：  \nEMD分析、VMD分析、神经网络预测层数、换用其他神经网络预测\n## 2.临界磨削脆塑转变深度与声发射之间的关系\n\n### 2.1 创新点\n1. 信号能量与临界磨削深度的关系（或者说是信号能量变化与去除方式转变的关系）\n2.\n\n### 2.2 实验方案\n1. 注意砂轮转速与工作台速度的协调（当前的砂轮转速及工作台速度会导致工件上只出现9个信号）  \n  应增大砂轮转速或减小工作台速度，使之出现连续的信号\n2. 砂轮转速及工作台速度的改变将极大的影响临界磨削深度\n","source":"_posts/2019-04-29-graduate.md","raw":"---\ntitle: graduate\ndate: 2019-04-29\ntags:\n- graduate    \n---\n\n# 毕业论文内容\n将写两个点，即一共做了两个实验：  \n1. 磨削深度与粗糙度的关系  \n2. 临界磨削脆塑转变深度与声发射之间的关系  \n\n\n    实验情况：\n      1. 第一个实验不再补测，只能在现有基础上进行一点创新；\n      2. 第二个实验将要补测，需要提出较为准确的实验方案  \n\n## 1.磨削深度与粗糙度的关系\n创新方向有：  \nEMD分析、VMD分析、神经网络预测层数、换用其他神经网络预测\n## 2.临界磨削脆塑转变深度与声发射之间的关系\n\n### 2.1 创新点\n1. 信号能量与临界磨削深度的关系（或者说是信号能量变化与去除方式转变的关系）\n2.\n\n### 2.2 实验方案\n1. 注意砂轮转速与工作台速度的协调（当前的砂轮转速及工作台速度会导致工件上只出现9个信号）  \n  应增大砂轮转速或减小工作台速度，使之出现连续的信号\n2. 砂轮转速及工作台速度的改变将极大的影响临界磨削深度\n","slug":"2019-04-29-graduate","published":1,"updated":"2019-04-29T14:12:40.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv2g1qcd000024r0r6ow4n6q","content":"<h1 id=\"毕业论文内容\"><a href=\"#毕业论文内容\" class=\"headerlink\" title=\"毕业论文内容\"></a>毕业论文内容</h1><p>将写两个点，即一共做了两个实验：  </p>\n<ol>\n<li>磨削深度与粗糙度的关系  </li>\n<li>临界磨削脆塑转变深度与声发射之间的关系  </li>\n</ol>\n<pre><code>实验情况：\n  1. 第一个实验不再补测，只能在现有基础上进行一点创新；\n  2. 第二个实验将要补测，需要提出较为准确的实验方案  \n</code></pre><h2 id=\"1-磨削深度与粗糙度的关系\"><a href=\"#1-磨削深度与粗糙度的关系\" class=\"headerlink\" title=\"1.磨削深度与粗糙度的关系\"></a>1.磨削深度与粗糙度的关系</h2><p>创新方向有：<br>EMD分析、VMD分析、神经网络预测层数、换用其他神经网络预测</p>\n<h2 id=\"2-临界磨削脆塑转变深度与声发射之间的关系\"><a href=\"#2-临界磨削脆塑转变深度与声发射之间的关系\" class=\"headerlink\" title=\"2.临界磨削脆塑转变深度与声发射之间的关系\"></a>2.临界磨削脆塑转变深度与声发射之间的关系</h2><h3 id=\"2-1-创新点\"><a href=\"#2-1-创新点\" class=\"headerlink\" title=\"2.1 创新点\"></a>2.1 创新点</h3><ol>\n<li>信号能量与临界磨削深度的关系（或者说是信号能量变化与去除方式转变的关系）<br>2.</li>\n</ol>\n<h3 id=\"2-2-实验方案\"><a href=\"#2-2-实验方案\" class=\"headerlink\" title=\"2.2 实验方案\"></a>2.2 实验方案</h3><ol>\n<li>注意砂轮转速与工作台速度的协调（当前的砂轮转速及工作台速度会导致工件上只出现9个信号）<br>应增大砂轮转速或减小工作台速度，使之出现连续的信号</li>\n<li>砂轮转速及工作台速度的改变将极大的影响临界磨削深度</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"毕业论文内容\"><a href=\"#毕业论文内容\" class=\"headerlink\" title=\"毕业论文内容\"></a>毕业论文内容</h1><p>将写两个点，即一共做了两个实验：  </p>\n<ol>\n<li>磨削深度与粗糙度的关系  </li>\n<li>临界磨削脆塑转变深度与声发射之间的关系  </li>\n</ol>\n<pre><code>实验情况：\n  1. 第一个实验不再补测，只能在现有基础上进行一点创新；\n  2. 第二个实验将要补测，需要提出较为准确的实验方案  \n</code></pre><h2 id=\"1-磨削深度与粗糙度的关系\"><a href=\"#1-磨削深度与粗糙度的关系\" class=\"headerlink\" title=\"1.磨削深度与粗糙度的关系\"></a>1.磨削深度与粗糙度的关系</h2><p>创新方向有：<br>EMD分析、VMD分析、神经网络预测层数、换用其他神经网络预测</p>\n<h2 id=\"2-临界磨削脆塑转变深度与声发射之间的关系\"><a href=\"#2-临界磨削脆塑转变深度与声发射之间的关系\" class=\"headerlink\" title=\"2.临界磨削脆塑转变深度与声发射之间的关系\"></a>2.临界磨削脆塑转变深度与声发射之间的关系</h2><h3 id=\"2-1-创新点\"><a href=\"#2-1-创新点\" class=\"headerlink\" title=\"2.1 创新点\"></a>2.1 创新点</h3><ol>\n<li>信号能量与临界磨削深度的关系（或者说是信号能量变化与去除方式转变的关系）<br>2.</li>\n</ol>\n<h3 id=\"2-2-实验方案\"><a href=\"#2-2-实验方案\" class=\"headerlink\" title=\"2.2 实验方案\"></a>2.2 实验方案</h3><ol>\n<li>注意砂轮转速与工作台速度的协调（当前的砂轮转速及工作台速度会导致工件上只出现9个信号）<br>应增大砂轮转速或减小工作台速度，使之出现连续的信号</li>\n<li>砂轮转速及工作台速度的改变将极大的影响临界磨削深度</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjv0zxdaw0000w0r0nvn1phoz","tag_id":"cjv0zxdbb0002w0r0yv5mild0","_id":"cjv0zxdbr0006w0r03hd1aibu"},{"post_id":"cjv0zxdaw0000w0r0nvn1phoz","tag_id":"cjv0zxdbi0003w0r0oa3ls5dm","_id":"cjv0zxdbs0007w0r02qtqhp9z"},{"post_id":"cjv0zxdaw0000w0r0nvn1phoz","tag_id":"cjv0zxdbk0004w0r08wjmo3zx","_id":"cjv0zxdbs0009w0r0oaa7og8k"},{"post_id":"cjv0zxdb70001w0r04sj1kluy","tag_id":"cjv0zxdbl0005w0r0g8reu3m6","_id":"cjv0zxdbu000bw0r0hf7tiswy"},{"post_id":"cjv0zxdb70001w0r04sj1kluy","tag_id":"cjv0zxdbs0008w0r0yx2plbpg","_id":"cjv0zxdbu000cw0r0ha4je5hf"},{"post_id":"cjv0zxdb70001w0r04sj1kluy","tag_id":"cjv0zxdbt000aw0r0niz25yvw","_id":"cjv0zxdbu000dw0r03imo8h6y"},{"post_id":"cjv0zxdc7000ew0r0rx5cy2i4","tag_id":"cjv0zxdbk0004w0r08wjmo3zx","_id":"cjv0zxdca000fw0r00378qhmt"},{"post_id":"cjv0zzxhy0000pkr03sxdn9pt","tag_id":"cjv0zzxi60001pkr021sj8bu4","_id":"cjv0zzxic0002pkr0rkl5a9r7"},{"post_id":"cjv2g1qcd000024r0r6ow4n6q","tag_id":"cjv2g1qcn000124r06ey0ynh1","_id":"cjv2g1qd0000224r0k1pjmw65"}],"Tag":[{"name":"Hexo","_id":"cjv0zxdbb0002w0r0yv5mild0"},{"name":"建站","_id":"cjv0zxdbi0003w0r0oa3ls5dm"},{"name":"Git","_id":"cjv0zxdbk0004w0r08wjmo3zx"},{"name":"写作","_id":"cjv0zxdbl0005w0r0g8reu3m6"},{"name":"分类","_id":"cjv0zxdbs0008w0r0yx2plbpg"},{"name":"Tags","_id":"cjv0zxdbt000aw0r0niz25yvw"},{"name":"工具","_id":"cjv0zzxi60001pkr021sj8bu4"},{"name":"graduate","_id":"cjv2g1qcn000124r06ey0ynh1"}]}}